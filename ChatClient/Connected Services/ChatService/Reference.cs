//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ChatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IMessageService", CallbackContract=typeof(ChatClient.ChatService.IMessageServiceCallback))]
    public interface IMessageService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/SendMessage")]
        void SendMessage(string message, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/StopMessaging", ReplyAction="http://tempuri.org/IMessageService/StopMessagingResponse")]
        void StopMessaging(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/StopMessaging", ReplyAction="http://tempuri.org/IMessageService/StopMessagingResponse")]
        System.Threading.Tasks.Task StopMessagingAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/StartMessaging", ReplyAction="http://tempuri.org/IMessageService/StartMessagingResponse")]
        void StartMessaging(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/StartMessaging", ReplyAction="http://tempuri.org/IMessageService/StartMessagingResponse")]
        System.Threading.Tasks.Task StartMessagingAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/ReciveMessage", ReplyAction="http://tempuri.org/IMessageService/ReciveMessageResponse")]
        void ReciveMessage(string message, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceChannel : ChatClient.ChatService.IMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageServiceClient : System.ServiceModel.DuplexClientBase<ChatClient.ChatService.IMessageService>, ChatClient.ChatService.IMessageService {
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(string message, string username) {
            base.Channel.SendMessage(message, username);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, string username) {
            return base.Channel.SendMessageAsync(message, username);
        }
        
        public void StopMessaging(string username) {
            base.Channel.StopMessaging(username);
        }
        
        public System.Threading.Tasks.Task StopMessagingAsync(string username) {
            return base.Channel.StopMessagingAsync(username);
        }
        
        public void StartMessaging(string username) {
            base.Channel.StartMessaging(username);
        }
        
        public System.Threading.Tasks.Task StartMessagingAsync(string username) {
            return base.Channel.StartMessagingAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.ISessionService", CallbackContract=typeof(ChatClient.ChatService.ISessionServiceCallback))]
    public interface ISessionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/LogIn", ReplyAction="http://tempuri.org/ISessionService/LogInResponse")]
        bool LogIn(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/LogIn", ReplyAction="http://tempuri.org/ISessionService/LogInResponse")]
        System.Threading.Tasks.Task<bool> LogInAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISessionService/LogOut")]
        void LogOut(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISessionService/LogOut")]
        System.Threading.Tasks.Task LogOutAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/JoinToChat", ReplyAction="http://tempuri.org/ISessionService/JoinToChatResponse")]
        void JoinToChat(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/LeaveTheChat", ReplyAction="http://tempuri.org/ISessionService/LeaveTheChatResponse")]
        void LeaveTheChat(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionServiceChannel : ChatClient.ChatService.ISessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionServiceClient : System.ServiceModel.DuplexClientBase<ChatClient.ChatService.ISessionService>, ChatClient.ChatService.ISessionService {
        
        public SessionServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SessionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SessionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool LogIn(string username) {
            return base.Channel.LogIn(username);
        }
        
        public System.Threading.Tasks.Task<bool> LogInAsync(string username) {
            return base.Channel.LogInAsync(username);
        }
        
        public void LogOut(string username) {
            base.Channel.LogOut(username);
        }
        
        public System.Threading.Tasks.Task LogOutAsync(string username) {
            return base.Channel.LogOutAsync(username);
        }
    }
}
